// Code generated by mockery v2.20.0. DO NOT EDIT.

package apply

import (
	mock "github.com/stretchr/testify/mock"
	dynamic "k8s.io/client-go/dynamic"

	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// mockDynClient is an autogenerated mock type for the dynClient type
type mockDynClient struct {
	mock.Mock
}

type mockDynClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDynClient) EXPECT() *mockDynClient_Expecter {
	return &mockDynClient_Expecter{mock: &_m.Mock}
}

// Resource provides a mock function with given fields: resource
func (_m *mockDynClient) Resource(resource schema.GroupVersionResource) dynamic.NamespaceableResourceInterface {
	ret := _m.Called(resource)

	var r0 dynamic.NamespaceableResourceInterface
	if rf, ok := ret.Get(0).(func(schema.GroupVersionResource) dynamic.NamespaceableResourceInterface); ok {
		r0 = rf(resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dynamic.NamespaceableResourceInterface)
		}
	}

	return r0
}

// mockDynClient_Resource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resource'
type mockDynClient_Resource_Call struct {
	*mock.Call
}

// Resource is a helper method to define mock.On call
//  - resource schema.GroupVersionResource
func (_e *mockDynClient_Expecter) Resource(resource interface{}) *mockDynClient_Resource_Call {
	return &mockDynClient_Resource_Call{Call: _e.mock.On("Resource", resource)}
}

func (_c *mockDynClient_Resource_Call) Run(run func(resource schema.GroupVersionResource)) *mockDynClient_Resource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.GroupVersionResource))
	})
	return _c
}

func (_c *mockDynClient_Resource_Call) Return(_a0 dynamic.NamespaceableResourceInterface) *mockDynClient_Resource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDynClient_Resource_Call) RunAndReturn(run func(schema.GroupVersionResource) dynamic.NamespaceableResourceInterface) *mockDynClient_Resource_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockDynClient interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDynClient creates a new instance of mockDynClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDynClient(t mockConstructorTestingTnewMockDynClient) *mockDynClient {
	mock := &mockDynClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
