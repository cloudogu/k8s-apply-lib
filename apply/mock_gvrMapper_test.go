// Code generated by mockery v2.20.0. DO NOT EDIT.

package apply

import (
	mock "github.com/stretchr/testify/mock"
	meta "k8s.io/apimachinery/pkg/api/meta"

	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// mockGvrMapper is an autogenerated mock type for the gvrMapper type
type mockGvrMapper struct {
	mock.Mock
}

type mockGvrMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *mockGvrMapper) EXPECT() *mockGvrMapper_Expecter {
	return &mockGvrMapper_Expecter{mock: &_m.Mock}
}

// KindFor provides a mock function with given fields: resource
func (_m *mockGvrMapper) KindFor(resource schema.GroupVersionResource) (schema.GroupVersionKind, error) {
	ret := _m.Called(resource)

	var r0 schema.GroupVersionKind
	var r1 error
	if rf, ok := ret.Get(0).(func(schema.GroupVersionResource) (schema.GroupVersionKind, error)); ok {
		return rf(resource)
	}
	if rf, ok := ret.Get(0).(func(schema.GroupVersionResource) schema.GroupVersionKind); ok {
		r0 = rf(resource)
	} else {
		r0 = ret.Get(0).(schema.GroupVersionKind)
	}

	if rf, ok := ret.Get(1).(func(schema.GroupVersionResource) error); ok {
		r1 = rf(resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGvrMapper_KindFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KindFor'
type mockGvrMapper_KindFor_Call struct {
	*mock.Call
}

// KindFor is a helper method to define mock.On call
//  - resource schema.GroupVersionResource
func (_e *mockGvrMapper_Expecter) KindFor(resource interface{}) *mockGvrMapper_KindFor_Call {
	return &mockGvrMapper_KindFor_Call{Call: _e.mock.On("KindFor", resource)}
}

func (_c *mockGvrMapper_KindFor_Call) Run(run func(resource schema.GroupVersionResource)) *mockGvrMapper_KindFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.GroupVersionResource))
	})
	return _c
}

func (_c *mockGvrMapper_KindFor_Call) Return(_a0 schema.GroupVersionKind, _a1 error) *mockGvrMapper_KindFor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGvrMapper_KindFor_Call) RunAndReturn(run func(schema.GroupVersionResource) (schema.GroupVersionKind, error)) *mockGvrMapper_KindFor_Call {
	_c.Call.Return(run)
	return _c
}

// KindsFor provides a mock function with given fields: resource
func (_m *mockGvrMapper) KindsFor(resource schema.GroupVersionResource) ([]schema.GroupVersionKind, error) {
	ret := _m.Called(resource)

	var r0 []schema.GroupVersionKind
	var r1 error
	if rf, ok := ret.Get(0).(func(schema.GroupVersionResource) ([]schema.GroupVersionKind, error)); ok {
		return rf(resource)
	}
	if rf, ok := ret.Get(0).(func(schema.GroupVersionResource) []schema.GroupVersionKind); ok {
		r0 = rf(resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.GroupVersionKind)
		}
	}

	if rf, ok := ret.Get(1).(func(schema.GroupVersionResource) error); ok {
		r1 = rf(resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGvrMapper_KindsFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KindsFor'
type mockGvrMapper_KindsFor_Call struct {
	*mock.Call
}

// KindsFor is a helper method to define mock.On call
//  - resource schema.GroupVersionResource
func (_e *mockGvrMapper_Expecter) KindsFor(resource interface{}) *mockGvrMapper_KindsFor_Call {
	return &mockGvrMapper_KindsFor_Call{Call: _e.mock.On("KindsFor", resource)}
}

func (_c *mockGvrMapper_KindsFor_Call) Run(run func(resource schema.GroupVersionResource)) *mockGvrMapper_KindsFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.GroupVersionResource))
	})
	return _c
}

func (_c *mockGvrMapper_KindsFor_Call) Return(_a0 []schema.GroupVersionKind, _a1 error) *mockGvrMapper_KindsFor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGvrMapper_KindsFor_Call) RunAndReturn(run func(schema.GroupVersionResource) ([]schema.GroupVersionKind, error)) *mockGvrMapper_KindsFor_Call {
	_c.Call.Return(run)
	return _c
}

// RESTMapping provides a mock function with given fields: gk, versions
func (_m *mockGvrMapper) RESTMapping(gk schema.GroupKind, versions ...string) (*meta.RESTMapping, error) {
	_va := make([]interface{}, len(versions))
	for _i := range versions {
		_va[_i] = versions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gk)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *meta.RESTMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(schema.GroupKind, ...string) (*meta.RESTMapping, error)); ok {
		return rf(gk, versions...)
	}
	if rf, ok := ret.Get(0).(func(schema.GroupKind, ...string) *meta.RESTMapping); ok {
		r0 = rf(gk, versions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*meta.RESTMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(schema.GroupKind, ...string) error); ok {
		r1 = rf(gk, versions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGvrMapper_RESTMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RESTMapping'
type mockGvrMapper_RESTMapping_Call struct {
	*mock.Call
}

// RESTMapping is a helper method to define mock.On call
//  - gk schema.GroupKind
//  - versions ...string
func (_e *mockGvrMapper_Expecter) RESTMapping(gk interface{}, versions ...interface{}) *mockGvrMapper_RESTMapping_Call {
	return &mockGvrMapper_RESTMapping_Call{Call: _e.mock.On("RESTMapping",
		append([]interface{}{gk}, versions...)...)}
}

func (_c *mockGvrMapper_RESTMapping_Call) Run(run func(gk schema.GroupKind, versions ...string)) *mockGvrMapper_RESTMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(schema.GroupKind), variadicArgs...)
	})
	return _c
}

func (_c *mockGvrMapper_RESTMapping_Call) Return(_a0 *meta.RESTMapping, _a1 error) *mockGvrMapper_RESTMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGvrMapper_RESTMapping_Call) RunAndReturn(run func(schema.GroupKind, ...string) (*meta.RESTMapping, error)) *mockGvrMapper_RESTMapping_Call {
	_c.Call.Return(run)
	return _c
}

// RESTMappings provides a mock function with given fields: gk, versions
func (_m *mockGvrMapper) RESTMappings(gk schema.GroupKind, versions ...string) ([]*meta.RESTMapping, error) {
	_va := make([]interface{}, len(versions))
	for _i := range versions {
		_va[_i] = versions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, gk)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*meta.RESTMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(schema.GroupKind, ...string) ([]*meta.RESTMapping, error)); ok {
		return rf(gk, versions...)
	}
	if rf, ok := ret.Get(0).(func(schema.GroupKind, ...string) []*meta.RESTMapping); ok {
		r0 = rf(gk, versions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*meta.RESTMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(schema.GroupKind, ...string) error); ok {
		r1 = rf(gk, versions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGvrMapper_RESTMappings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RESTMappings'
type mockGvrMapper_RESTMappings_Call struct {
	*mock.Call
}

// RESTMappings is a helper method to define mock.On call
//  - gk schema.GroupKind
//  - versions ...string
func (_e *mockGvrMapper_Expecter) RESTMappings(gk interface{}, versions ...interface{}) *mockGvrMapper_RESTMappings_Call {
	return &mockGvrMapper_RESTMappings_Call{Call: _e.mock.On("RESTMappings",
		append([]interface{}{gk}, versions...)...)}
}

func (_c *mockGvrMapper_RESTMappings_Call) Run(run func(gk schema.GroupKind, versions ...string)) *mockGvrMapper_RESTMappings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(schema.GroupKind), variadicArgs...)
	})
	return _c
}

func (_c *mockGvrMapper_RESTMappings_Call) Return(_a0 []*meta.RESTMapping, _a1 error) *mockGvrMapper_RESTMappings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGvrMapper_RESTMappings_Call) RunAndReturn(run func(schema.GroupKind, ...string) ([]*meta.RESTMapping, error)) *mockGvrMapper_RESTMappings_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceFor provides a mock function with given fields: input
func (_m *mockGvrMapper) ResourceFor(input schema.GroupVersionResource) (schema.GroupVersionResource, error) {
	ret := _m.Called(input)

	var r0 schema.GroupVersionResource
	var r1 error
	if rf, ok := ret.Get(0).(func(schema.GroupVersionResource) (schema.GroupVersionResource, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(schema.GroupVersionResource) schema.GroupVersionResource); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(schema.GroupVersionResource)
	}

	if rf, ok := ret.Get(1).(func(schema.GroupVersionResource) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGvrMapper_ResourceFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceFor'
type mockGvrMapper_ResourceFor_Call struct {
	*mock.Call
}

// ResourceFor is a helper method to define mock.On call
//  - input schema.GroupVersionResource
func (_e *mockGvrMapper_Expecter) ResourceFor(input interface{}) *mockGvrMapper_ResourceFor_Call {
	return &mockGvrMapper_ResourceFor_Call{Call: _e.mock.On("ResourceFor", input)}
}

func (_c *mockGvrMapper_ResourceFor_Call) Run(run func(input schema.GroupVersionResource)) *mockGvrMapper_ResourceFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.GroupVersionResource))
	})
	return _c
}

func (_c *mockGvrMapper_ResourceFor_Call) Return(_a0 schema.GroupVersionResource, _a1 error) *mockGvrMapper_ResourceFor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGvrMapper_ResourceFor_Call) RunAndReturn(run func(schema.GroupVersionResource) (schema.GroupVersionResource, error)) *mockGvrMapper_ResourceFor_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceSingularizer provides a mock function with given fields: resource
func (_m *mockGvrMapper) ResourceSingularizer(resource string) (string, error) {
	ret := _m.Called(resource)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(resource)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(resource)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGvrMapper_ResourceSingularizer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceSingularizer'
type mockGvrMapper_ResourceSingularizer_Call struct {
	*mock.Call
}

// ResourceSingularizer is a helper method to define mock.On call
//  - resource string
func (_e *mockGvrMapper_Expecter) ResourceSingularizer(resource interface{}) *mockGvrMapper_ResourceSingularizer_Call {
	return &mockGvrMapper_ResourceSingularizer_Call{Call: _e.mock.On("ResourceSingularizer", resource)}
}

func (_c *mockGvrMapper_ResourceSingularizer_Call) Run(run func(resource string)) *mockGvrMapper_ResourceSingularizer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockGvrMapper_ResourceSingularizer_Call) Return(singular string, err error) *mockGvrMapper_ResourceSingularizer_Call {
	_c.Call.Return(singular, err)
	return _c
}

func (_c *mockGvrMapper_ResourceSingularizer_Call) RunAndReturn(run func(string) (string, error)) *mockGvrMapper_ResourceSingularizer_Call {
	_c.Call.Return(run)
	return _c
}

// ResourcesFor provides a mock function with given fields: input
func (_m *mockGvrMapper) ResourcesFor(input schema.GroupVersionResource) ([]schema.GroupVersionResource, error) {
	ret := _m.Called(input)

	var r0 []schema.GroupVersionResource
	var r1 error
	if rf, ok := ret.Get(0).(func(schema.GroupVersionResource) ([]schema.GroupVersionResource, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(schema.GroupVersionResource) []schema.GroupVersionResource); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]schema.GroupVersionResource)
		}
	}

	if rf, ok := ret.Get(1).(func(schema.GroupVersionResource) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGvrMapper_ResourcesFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourcesFor'
type mockGvrMapper_ResourcesFor_Call struct {
	*mock.Call
}

// ResourcesFor is a helper method to define mock.On call
//  - input schema.GroupVersionResource
func (_e *mockGvrMapper_Expecter) ResourcesFor(input interface{}) *mockGvrMapper_ResourcesFor_Call {
	return &mockGvrMapper_ResourcesFor_Call{Call: _e.mock.On("ResourcesFor", input)}
}

func (_c *mockGvrMapper_ResourcesFor_Call) Run(run func(input schema.GroupVersionResource)) *mockGvrMapper_ResourcesFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.GroupVersionResource))
	})
	return _c
}

func (_c *mockGvrMapper_ResourcesFor_Call) Return(_a0 []schema.GroupVersionResource, _a1 error) *mockGvrMapper_ResourcesFor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGvrMapper_ResourcesFor_Call) RunAndReturn(run func(schema.GroupVersionResource) ([]schema.GroupVersionResource, error)) *mockGvrMapper_ResourcesFor_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockGvrMapper interface {
	mock.TestingT
	Cleanup(func())
}

// newMockGvrMapper creates a new instance of mockGvrMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockGvrMapper(t mockConstructorTestingTnewMockGvrMapper) *mockGvrMapper {
	mock := &mockGvrMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
